import type { ToolRegistration } from "@/types";
import { evolutionApi } from "@/utils/evolutionApi";
import { makeJsonSchema } from "@/utils/makeJsonSchema";
import { getEvolutionSettingsSchema, type GetEvolutionSettingsSchema } from "./schema";

export async function getEvolutionSettings(args: GetEvolutionSettingsSchema) {
  const { instanceName } = args;
  const result = await evolutionApi.getSettings(instanceName);
  return result;
}

export const getEvolutionSettingsTool: ToolRegistration<GetEvolutionSettingsSchema> = {
  name: "get_evolution_settings",
  description: "Retrieve the current behavior settings for a WhatsApp instance including call handling, message receipts, and online status settings",
  inputSchema: makeJsonSchema(getEvolutionSettingsSchema),
  handler: async (args: GetEvolutionSettingsSchema) => {
    try {
      const result = await getEvolutionSettings(args);
      const settings = result.settings.settings;
      
      return {
        content: [
          {
            type: "text",
            text: `üìã Settings for ${args.instanceName}:
            
‚Ä¢ ${settings.alwaysOnline ? '‚úì' : '‚úó'} Always online
‚Ä¢ ${settings.readMessages ? '‚úì' : '‚úó'} Read receipts
‚Ä¢ ${settings.readStatus ? '‚úì' : '‚úó'} Read status
‚Ä¢ ${settings.rejectCall ? '‚úì' : '‚úó'} Auto-reject calls
‚Ä¢ ${settings.groupsIgnore ? '‚úì' : '‚úó'} Ignore groups
‚Ä¢ ${settings.syncFullHistory ? '‚úì' : '‚úó'} Sync full history
${settings.msgCall ? '‚Ä¢ Call rejection message: "' + settings.msgCall + '"' : ''}`
          }
        ]
      };
    } catch (error) {
      console.error("Error in getEvolutionSettingsTool handler:", error);
      return {
        content: [
          {
            type: "text",
            text: `‚ùå Failed to retrieve settings: ${error instanceof Error ? error.message : String(error)}`
          }
        ]
      };
    }
  },
}; 